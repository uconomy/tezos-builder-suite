import { launchDeployer } from ".";
import { Contract } from "./domain/contract";
import { Endpoint, NetworkType } from "./domain/endpoint";

const COUNTER_MICHELSON = "[ { \"prim\": \"parameter\",\n    \"args\":\n      [ { \"prim\": \"or\",\n          \"args\":\n            [ { \"prim\": \"or\",\n                \"args\":\n                  [ { \"prim\": \"int\", \"annots\": [ \"%decrement\" ] },\n                    { \"prim\": \"int\", \"annots\": [ \"%increment\" ] } ] },\n              { \"prim\": \"unit\", \"annots\": [ \"%reset\" ] } ] } ] },\n  { \"prim\": \"storage\", \"args\": [ { \"prim\": \"int\" } ] },\n  { \"prim\": \"code\",\n    \"args\":\n      [ [ { \"prim\": \"UNPAIR\" },\n          { \"prim\": \"IF_LEFT\",\n            \"args\":\n              [ [ { \"prim\": \"IF_LEFT\",\n                    \"args\":\n                      [ [ { \"prim\": \"SWAP\" }, { \"prim\": \"SUB\" } ],\n                        [ { \"prim\": \"ADD\" } ] ] } ],\n                [ { \"prim\": \"DROP\", \"args\": [ { \"int\": \"2\" } ] },\n                  { \"prim\": \"PUSH\",\n                    \"args\": [ { \"prim\": \"int\" }, { \"int\": \"0\" } ] } ] ] },\n          { \"prim\": \"NIL\", \"args\": [ { \"prim\": \"operation\" } ] },\n          { \"prim\": \"PAIR\" } ] ] } ]\n\n";

const PASCALIGO_EXAMPLE = 
`type storage is int

type parameter is
  Increment of int
| Decrement of int
| Reset

type return is list (operation) * storage

// Two entrypoints

function add (const store : storage; const delta : int) : storage is 
  store + delta

function sub (const store : storage; const delta : int) : storage is 
  store - delta

(* Main access point that dispatches to the entrypoints according to
   the smart contract parameter. *)

function main (const action : parameter; const store : storage) : return is
 ((nil : list (operation)),    // No operations
  case action of
    Increment (n) -> add (store, n)
  | Decrement (n) -> sub (store, n)
  | Reset         -> 0
  end)
`;

const CAMELIGO_EXAMPLE = 
`type storage = int

type parameter =
  Increment of int
| Decrement of int
| Reset

type return = operation list * storage

// Two entrypoints

let add (store, delta : storage * int) : storage = store + delta
let sub (store, delta : storage * int) : storage = store - delta

(* Main access point that dispatches to the entrypoints according to
   the smart contract parameter. *)

let main (action, store : parameter * storage) : return =
 ([] : operation list),    // No operations
 (match action with
   Increment (n) -> add (store, n)
 | Decrement (n) -> sub (store, n)
 | Reset         -> 0)
`;


const REASONLIGO_EXAMPLE = 
`type storage = int;

type parameter =
  Increment (int)
| Decrement (int)
| Reset;

type return = (list (operation), storage);

// Two entrypoints

let add = ((store, delta) : (storage, int)) : storage => store + delta;
let sub = ((store, delta) : (storage, int)) : storage => store - delta;

/* Main access point that dispatches to the entrypoints according to
   the smart contract parameter. */

let main = ((action, store) : (parameter, storage)) : return => {
 (([] : list (operation)),    // No operations
 (switch (action) {
  | Increment (n) => add ((store, n))
  | Decrement (n) => sub ((store, n))
  | Reset         => 0}))
};
`;

const JSLIGO_EXAMPLE = 
`type storage = int;

type parameter =
| ["Increment", int]
| ["Decrement", int]
| ["Reset"];

type return_ = [list <operation>, storage];

/* Two entrypoints */

let add = ([store, delta] : [storage, int]) : storage => store + delta;
let sub = ([store, delta] : [storage, int]) : storage => store - delta;

/* Main access point that dispatches to the entrypoints according to
   the smart contract parameter. */

let main = ([action, store] : [parameter, storage]) : return_ => {
 return [
   (list([]) as list <operation>),    // No operations
   (match (action, {
    Increment: (n: int) => add ([store, n]),
    Decrement: (n: int) => sub ([store, n]),
    Reset:     ()  => 0}))
  ]
};
`;

const FA12_SOURCE = "type account is record [\n  balance: nat;\n  allowances: map(address, nat);\n]\n\ntype storage is record [\n  totalSupply: nat;\n  ledger: big_map(address, account);\n]\n\ntype transfer_type is michelson_pair(address, \"from\", michelson_pair(address, \"to\", nat, \"value\"), \"\")\ntype approve_type is michelson_pair(address, \"spender\", nat, \"value\")\ntype balance_type is michelson_pair(address, \"owner\", contract(nat), \"\")\ntype allowance_type is michelson_pair(michelson_pair(address, \"owner\", address, \"spender\"), \"\", contract(nat), \"\")\ntype total_supply_type is michelson_pair(unit, \"\", contract(nat), \"\")\ntype redeem_type is nat\ntype mint_type is unit\n\ntype action is\n| Default of mint_type\n| Mint of mint_type\n| Redeem of redeem_type\n| Transfer of transfer_type\n| Approve of approve_type\n| GetBalance of balance_type\n| GetAllowance of allowance_type\n| GetTotalSupply of total_supply_type\n\nfunction getAccount (const owner: address; const s: storage) : account is\ncase s.ledger[owner] of \n| None -> record [\n    balance = 0n;\n    allowances = (map[] : map(address, nat));\n  ]\n| Some(acc) -> acc\nend\n\nfunction transfer (const owner: address; const destination: address; const value: nat; var s: storage) : storage is\nblock {\n  var src := getAccount(owner, s);\n  var dst := getAccount(destination, s);\n\n  if Tezos.sender = owner then skip else block {\n    const allowance = case src.allowances[Tezos.sender] of\n    | None -> 0n\n    | Some(all) -> all\n    end;\n\n    if allowance < value then failwith(\"NotPermitted\") else skip;\n    src.allowances[Tezos.sender] := abs(allowance - value);\n  };\n\n  if src.balance < value then failwith(\"InsufficientBalance\") else skip;\n  src.balance := abs(src.balance - value);\n  dst.balance := dst.balance + value;\n  \n  s.ledger[owner] := src;\n  s.ledger[destination] := dst;\n} with s\n\nfunction approve (const spender: address; const value: nat; var s: storage) : storage is\nblock {\n  var acc: account := getAccount(Tezos.sender, s);\n  acc.allowances[spender] := value;\n  s.ledger[Tezos.sender] := acc;\n} with s\n\nfunction getAllowance (const owner: address; const spender: address; const receiver: contract(nat); const s: storage) : list(operation) is\nblock {\n  const acc = getAccount(owner, s);\n  const allowance = case acc.allowances[spender] of\n    | None -> 0n\n    | Some(all) -> all\n  end\n} with list[Tezos.transaction(allowance, 0mutez, receiver)]\n\nfunction getBalance (const owner: address; const receiver: contract(nat); const s: storage) : list(operation) is\nblock {\n  const acc = getAccount(owner, s)\n} with list[Tezos.transaction(acc.balance, 0mutez, receiver)]\n\nfunction getTotalSupply (const receiver: contract(nat); const s: storage) : list(operation) is\nlist[Tezos.transaction(s.totalSupply, 0mutez, receiver)]\n\nfunction mint (var s: storage) : storage is\nblock {\n  var acc := getAccount(Tezos.sender, s);\n  acc.balance := acc.balance + Tezos.amount / 1mutez;\n  s.ledger[Tezos.sender] := acc;\n} with s\n\nfunction redeem (const val: nat; var s: storage) : (list(operation) * storage) is\nblock {\n  var acc := getAccount(Tezos.sender, s);\n  if acc.balance < val then failwith(\"NotEnoughBalance\") else skip;\n\n  acc.balance := abs(acc.balance - val);\n  s.ledger[Tezos.sender] := acc;\n\n  const receiver: contract(unit) = case (Tezos.get_contract_opt(Tezos.sender) : option(contract(unit))) of\n    | None -> (failwith(\"InvalidContract\") : (contract(unit)))\n    | Some(contract) -> contract\n  end;\n} with (list[Tezos.transaction(unit, val * 1mutez, receiver)], s)\n\nfunction main (const a: action; var s: storage): (list(operation) * storage) is\ncase a of\n| Default(_v) -> ((nil : list(operation)), mint(s))\n| Mint(_v) -> ((nil : list(operation)), mint(s))\n| Redeem(v) -> redeem(v, s)\n| Transfer(v) -> ((nil : list(operation)), transfer(v.0, v.1.0, v.1.1, s))\n| Approve(v) -> ((nil : list(operation)), approve(v.0, v.1, s))\n| GetBalance(v) -> (getBalance(v.0, v.1, s), s)\n| GetAllowance(v) -> (getAllowance(v.0.0, v.0.1, v.1, s), s)\n| GetTotalSupply(v) -> (getTotalSupply(v.1, s), s)\nend";
const FA12_MICHELSON = "[ { \"prim\": \"parameter\",\n    \"args\":\n      [ { \"prim\": \"or\",\n          \"args\":\n            [ { \"prim\": \"or\",\n                \"args\":\n                  [ { \"prim\": \"or\",\n                      \"args\":\n                        [ { \"prim\": \"pair\",\n                            \"args\":\n                              [ { \"prim\": \"address\",\n                                  \"annots\": [ \"%spender\" ] },\n                                { \"prim\": \"nat\", \"annots\": [ \"%value\" ] } ],\n                            \"annots\": [ \"%approve\" ] },\n                          { \"prim\": \"unit\", \"annots\": [ \"%default\" ] } ] },\n                    { \"prim\": \"or\",\n                      \"args\":\n                        [ { \"prim\": \"pair\",\n                            \"args\":\n                              [ { \"prim\": \"pair\",\n                                  \"args\":\n                                    [ { \"prim\": \"address\",\n                                        \"annots\": [ \"%owner\" ] },\n                                      { \"prim\": \"address\",\n                                        \"annots\": [ \"%spender\" ] } ] },\n                                { \"prim\": \"contract\",\n                                  \"args\": [ { \"prim\": \"nat\" } ] } ],\n                            \"annots\": [ \"%getAllowance\" ] },\n                          { \"prim\": \"pair\",\n                            \"args\":\n                              [ { \"prim\": \"address\", \"annots\": [ \"%owner\" ] },\n                                { \"prim\": \"contract\",\n                                  \"args\": [ { \"prim\": \"nat\" } ] } ],\n                            \"annots\": [ \"%getBalance\" ] } ] } ] },\n              { \"prim\": \"or\",\n                \"args\":\n                  [ { \"prim\": \"or\",\n                      \"args\":\n                        [ { \"prim\": \"pair\",\n                            \"args\":\n                              [ { \"prim\": \"unit\" },\n                                { \"prim\": \"contract\",\n                                  \"args\": [ { \"prim\": \"nat\" } ] } ],\n                            \"annots\": [ \"%getTotalSupply\" ] },\n                          { \"prim\": \"unit\", \"annots\": [ \"%mint\" ] } ] },\n                    { \"prim\": \"or\",\n                      \"args\":\n                        [ { \"prim\": \"nat\", \"annots\": [ \"%redeem\" ] },\n                          { \"prim\": \"pair\",\n                            \"args\":\n                              [ { \"prim\": \"address\", \"annots\": [ \"%from\" ] },\n                                { \"prim\": \"pair\",\n                                  \"args\":\n                                    [ { \"prim\": \"address\",\n                                        \"annots\": [ \"%to\" ] },\n                                      { \"prim\": \"nat\",\n                                        \"annots\": [ \"%value\" ] } ] } ],\n                            \"annots\": [ \"%transfer\" ] } ] } ] } ] } ] },\n  { \"prim\": \"storage\",\n    \"args\":\n      [ { \"prim\": \"pair\",\n          \"args\":\n            [ { \"prim\": \"big_map\",\n                \"args\":\n                  [ { \"prim\": \"address\" },\n                    { \"prim\": \"pair\",\n                      \"args\":\n                        [ { \"prim\": \"map\",\n                            \"args\":\n                              [ { \"prim\": \"address\" }, { \"prim\": \"nat\" } ],\n                            \"annots\": [ \"%allowances\" ] },\n                          { \"prim\": \"nat\", \"annots\": [ \"%balance\" ] } ] } ],\n                \"annots\": [ \"%ledger\" ] },\n              { \"prim\": \"nat\", \"annots\": [ \"%totalSupply\" ] } ] } ] },\n  { \"prim\": \"code\",\n    \"args\":\n      [ [ { \"prim\": \"LAMBDA\",\n            \"args\":\n              [ { \"prim\": \"pair\",\n                  \"args\":\n                    [ { \"prim\": \"address\" },\n                      { \"prim\": \"pair\",\n                        \"args\":\n                          [ { \"prim\": \"big_map\",\n                              \"args\":\n                                [ { \"prim\": \"address\" },\n                                  { \"prim\": \"pair\",\n                                    \"args\":\n                                      [ { \"prim\": \"map\",\n                                          \"args\":\n                                            [ { \"prim\": \"address\" },\n                                              { \"prim\": \"nat\" } ] },\n                                        { \"prim\": \"nat\" } ] } ] },\n                            { \"prim\": \"nat\" } ] } ] },\n                { \"prim\": \"pair\",\n                  \"args\":\n                    [ { \"prim\": \"map\",\n                        \"args\": [ { \"prim\": \"address\" }, { \"prim\": \"nat\" } ] },\n                      { \"prim\": \"nat\" } ] },\n                [ { \"prim\": \"UNPAIR\" }, { \"prim\": \"SWAP\" },\n                  { \"prim\": \"CAR\" }, { \"prim\": \"SWAP\" }, { \"prim\": \"GET\" },\n                  { \"prim\": \"IF_NONE\",\n                    \"args\":\n                      [ [ { \"prim\": \"PUSH\",\n                            \"args\": [ { \"prim\": \"nat\" }, { \"int\": \"0\" } ] },\n                          { \"prim\": \"EMPTY_MAP\",\n                            \"args\":\n                              [ { \"prim\": \"address\" }, { \"prim\": \"nat\" } ] },\n                          { \"prim\": \"PAIR\" } ], [] ] } ] ] },\n          { \"prim\": \"DUP\" },\n          { \"prim\": \"LAMBDA\",\n            \"args\":\n              [ { \"prim\": \"pair\",\n                  \"args\":\n                    [ { \"prim\": \"lambda\",\n                        \"args\":\n                          [ { \"prim\": \"pair\",\n                              \"args\":\n                                [ { \"prim\": \"address\" },\n                                  { \"prim\": \"pair\",\n                                    \"args\":\n                                      [ { \"prim\": \"big_map\",\n                                          \"args\":\n                                            [ { \"prim\": \"address\" },\n                                              { \"prim\": \"pair\",\n                                                \"args\":\n                                                  [ { \"prim\": \"map\",\n                                                      \"args\":\n                                                        [ { \"prim\": \"address\" },\n                                                          { \"prim\": \"nat\" } ] },\n                                                    { \"prim\": \"nat\" } ] } ] },\n                                        { \"prim\": \"nat\" } ] } ] },\n                            { \"prim\": \"pair\",\n                              \"args\":\n                                [ { \"prim\": \"map\",\n                                    \"args\":\n                                      [ { \"prim\": \"address\" },\n                                        { \"prim\": \"nat\" } ] },\n                                  { \"prim\": \"nat\" } ] } ] },\n                      { \"prim\": \"pair\",\n                        \"args\":\n                          [ { \"prim\": \"big_map\",\n                              \"args\":\n                                [ { \"prim\": \"address\" },\n                                  { \"prim\": \"pair\",\n                                    \"args\":\n                                      [ { \"prim\": \"map\",\n                                          \"args\":\n                                            [ { \"prim\": \"address\" },\n                                              { \"prim\": \"nat\" } ] },\n                                        { \"prim\": \"nat\" } ] } ] },\n                            { \"prim\": \"nat\" } ] } ] },\n                { \"prim\": \"pair\",\n                  \"args\":\n                    [ { \"prim\": \"big_map\",\n                        \"args\":\n                          [ { \"prim\": \"address\" },\n                            { \"prim\": \"pair\",\n                              \"args\":\n                                [ { \"prim\": \"map\",\n                                    \"args\":\n                                      [ { \"prim\": \"address\" },\n                                        { \"prim\": \"nat\" } ] },\n                                  { \"prim\": \"nat\" } ] } ] },\n                      { \"prim\": \"nat\" } ] },\n                [ { \"prim\": \"UNPAIR\" }, { \"prim\": \"SWAP\" },\n                  { \"prim\": \"DUP\" }, { \"prim\": \"SENDER\" },\n                  { \"prim\": \"PAIR\" },\n                  { \"prim\": \"DIG\", \"args\": [ { \"int\": \"2\" } ] },\n                  { \"prim\": \"SWAP\" }, { \"prim\": \"EXEC\" },\n                  { \"prim\": \"PUSH\",\n                    \"args\": [ { \"prim\": \"mutez\" }, { \"int\": \"1\" } ] },\n                  { \"prim\": \"AMOUNT\" }, { \"prim\": \"EDIV\" },\n                  { \"prim\": \"IF_NONE\",\n                    \"args\":\n                      [ [ { \"prim\": \"PUSH\",\n                            \"args\":\n                              [ { \"prim\": \"string\" },\n                                { \"string\": \"DIV by 0\" } ] },\n                          { \"prim\": \"FAILWITH\" } ], [] ] },\n                  { \"prim\": \"CAR\" }, { \"prim\": \"SWAP\" }, { \"prim\": \"DUP\" },\n                  { \"prim\": \"DUG\", \"args\": [ { \"int\": \"2\" } ] },\n                  { \"prim\": \"CDR\" }, { \"prim\": \"ADD\" }, { \"prim\": \"SWAP\" },\n                  { \"prim\": \"CAR\" }, { \"prim\": \"PAIR\" }, { \"prim\": \"SWAP\" },\n                  { \"prim\": \"DUP\" },\n                  { \"prim\": \"DUG\", \"args\": [ { \"int\": \"2\" } ] },\n                  { \"prim\": \"CDR\" },\n                  { \"prim\": \"DIG\", \"args\": [ { \"int\": \"2\" } ] },\n                  { \"prim\": \"CAR\" },\n                  { \"prim\": \"DIG\", \"args\": [ { \"int\": \"2\" } ] },\n                  { \"prim\": \"SOME\" }, { \"prim\": \"SENDER\" },\n                  { \"prim\": \"UPDATE\" }, { \"prim\": \"PAIR\" } ] ] },\n          { \"prim\": \"SWAP\" }, { \"prim\": \"APPLY\" },\n          { \"prim\": \"DIG\", \"args\": [ { \"int\": \"2\" } ] },\n          { \"prim\": \"UNPAIR\" },\n          { \"prim\": \"IF_LEFT\",\n            \"args\":\n              [ [ { \"prim\": \"IF_LEFT\",\n                    \"args\":\n                      [ [ { \"prim\": \"IF_LEFT\",\n                            \"args\":\n                              [ [ { \"prim\": \"DIG\",\n                                    \"args\": [ { \"int\": \"2\" } ] },\n                                  { \"prim\": \"DROP\" }, { \"prim\": \"UNPAIR\" },\n                                  { \"prim\": \"DUP\",\n                                    \"args\": [ { \"int\": \"3\" } ] },\n                                  { \"prim\": \"SENDER\" }, { \"prim\": \"PAIR\" },\n                                  { \"prim\": \"DIG\",\n                                    \"args\": [ { \"int\": \"4\" } ] },\n                                  { \"prim\": \"SWAP\" }, { \"prim\": \"EXEC\" },\n                                  { \"prim\": \"DUP\",\n                                    \"args\": [ { \"int\": \"4\" } ] },\n                                  { \"prim\": \"CDR\" },\n                                  { \"prim\": \"DIG\",\n                                    \"args\": [ { \"int\": \"4\" } ] },\n                                  { \"prim\": \"CAR\" },\n                                  { \"prim\": \"DUP\",\n                                    \"args\": [ { \"int\": \"3\" } ] },\n                                  { \"prim\": \"CDR\" },\n                                  { \"prim\": \"DIG\",\n                                    \"args\": [ { \"int\": \"3\" } ] },\n                                  { \"prim\": \"CAR\" },\n                                  { \"prim\": \"DIG\",\n                                    \"args\": [ { \"int\": \"5\" } ] },\n                                  { \"prim\": \"DIG\",\n                                    \"args\": [ { \"int\": \"5\" } ] },\n                                  { \"prim\": \"SWAP\" }, { \"prim\": \"SOME\" },\n                                  { \"prim\": \"SWAP\" }, { \"prim\": \"UPDATE\" },\n                                  { \"prim\": \"PAIR\" }, { \"prim\": \"SOME\" },\n                                  { \"prim\": \"SENDER\" }, { \"prim\": \"UPDATE\" },\n                                  { \"prim\": \"PAIR\" },\n                                  { \"prim\": \"NIL\",\n                                    \"args\": [ { \"prim\": \"operation\" } ] },\n                                  { \"prim\": \"PAIR\" } ],\n                                [ { \"prim\": \"DIG\",\n                                    \"args\": [ { \"int\": \"3\" } ] },\n                                  { \"prim\": \"DROP\",\n                                    \"args\": [ { \"int\": \"2\" } ] },\n                                  { \"prim\": \"EXEC\" },\n                                  { \"prim\": \"NIL\",\n                                    \"args\": [ { \"prim\": \"operation\" } ] },\n                                  { \"prim\": \"PAIR\" } ] ] } ],\n                        [ { \"prim\": \"DIG\", \"args\": [ { \"int\": \"2\" } ] },\n                          { \"prim\": \"DROP\" },\n                          { \"prim\": \"IF_LEFT\",\n                            \"args\":\n                              [ [ { \"prim\": \"SWAP\" }, { \"prim\": \"DUP\" },\n                                  { \"prim\": \"DUP\",\n                                    \"args\": [ { \"int\": \"3\" } ] },\n                                  { \"prim\": \"CDR\" }, { \"prim\": \"PAIR\" },\n                                  { \"prim\": \"DUP\",\n                                    \"args\": [ { \"int\": \"3\" } ] },\n                                  { \"prim\": \"CAR\" }, { \"prim\": \"CDR\" },\n                                  { \"prim\": \"DIG\",\n                                    \"args\": [ { \"int\": \"3\" } ] },\n                                  { \"prim\": \"CAR\" }, { \"prim\": \"CAR\" },\n                                  { \"prim\": \"DIG\",\n                                    \"args\": [ { \"int\": \"2\" } ] },\n                                  { \"prim\": \"UNPAIR\" }, { \"prim\": \"SWAP\" },\n                                  { \"prim\": \"DIG\",\n                                    \"args\": [ { \"int\": \"2\" } ] },\n                                  { \"prim\": \"PAIR\" },\n                                  { \"prim\": \"DIG\",\n                                    \"args\": [ { \"int\": \"4\" } ] },\n                                  { \"prim\": \"SWAP\" }, { \"prim\": \"EXEC\" },\n                                  { \"prim\": \"NIL\",\n                                    \"args\": [ { \"prim\": \"operation\" } ] },\n                                  { \"prim\": \"DIG\",\n                                    \"args\": [ { \"int\": \"2\" } ] },\n                                  { \"prim\": \"PUSH\",\n                                    \"args\":\n                                      [ { \"prim\": \"mutez\" }, { \"int\": \"0\" } ] },\n                                  { \"prim\": \"DIG\",\n                                    \"args\": [ { \"int\": \"3\" } ] },\n                                  { \"prim\": \"CAR\" },\n                                  { \"prim\": \"DIG\",\n                                    \"args\": [ { \"int\": \"4\" } ] },\n                                  { \"prim\": \"GET\" },\n                                  { \"prim\": \"IF_NONE\",\n                                    \"args\":\n                                      [ [ { \"prim\": \"PUSH\",\n                                            \"args\":\n                                              [ { \"prim\": \"nat\" },\n                                                { \"int\": \"0\" } ] } ], [] ] },\n                                  { \"prim\": \"TRANSFER_TOKENS\" },\n                                  { \"prim\": \"CONS\" }, { \"prim\": \"PAIR\" } ],\n                                [ { \"prim\": \"SWAP\" }, { \"prim\": \"DUP\" },\n                                  { \"prim\": \"DIG\",\n                                    \"args\": [ { \"int\": \"2\" } ] },\n                                  { \"prim\": \"UNPAIR\" },\n                                  { \"prim\": \"DIG\",\n                                    \"args\": [ { \"int\": \"2\" } ] },\n                                  { \"prim\": \"SWAP\" }, { \"prim\": \"PAIR\" },\n                                  { \"prim\": \"DIG\",\n                                    \"args\": [ { \"int\": \"3\" } ] },\n                                  { \"prim\": \"SWAP\" }, { \"prim\": \"EXEC\" },\n                                  { \"prim\": \"NIL\",\n                                    \"args\": [ { \"prim\": \"operation\" } ] },\n                                  { \"prim\": \"DIG\",\n                                    \"args\": [ { \"int\": \"2\" } ] },\n                                  { \"prim\": \"PUSH\",\n                                    \"args\":\n                                      [ { \"prim\": \"mutez\" }, { \"int\": \"0\" } ] },\n                                  { \"prim\": \"DIG\",\n                                    \"args\": [ { \"int\": \"3\" } ] },\n                                  { \"prim\": \"CDR\" },\n                                  { \"prim\": \"TRANSFER_TOKENS\" },\n                                  { \"prim\": \"CONS\" }, { \"prim\": \"PAIR\" } ] ] } ] ] } ],\n                [ { \"prim\": \"IF_LEFT\",\n                    \"args\":\n                      [ [ { \"prim\": \"DIG\", \"args\": [ { \"int\": \"3\" } ] },\n                          { \"prim\": \"DROP\" },\n                          { \"prim\": \"IF_LEFT\",\n                            \"args\":\n                              [ [ { \"prim\": \"DIG\",\n                                    \"args\": [ { \"int\": \"2\" } ] },\n                                  { \"prim\": \"DROP\" }, { \"prim\": \"SWAP\" },\n                                  { \"prim\": \"DUP\" },\n                                  { \"prim\": \"DIG\",\n                                    \"args\": [ { \"int\": \"2\" } ] },\n                                  { \"prim\": \"CDR\" },\n                                  { \"prim\": \"NIL\",\n                                    \"args\": [ { \"prim\": \"operation\" } ] },\n                                  { \"prim\": \"SWAP\" },\n                                  { \"prim\": \"PUSH\",\n                                    \"args\":\n                                      [ { \"prim\": \"mutez\" }, { \"int\": \"0\" } ] },\n                                  { \"prim\": \"DIG\",\n                                    \"args\": [ { \"int\": \"3\" } ] },\n                                  { \"prim\": \"CDR\" },\n                                  { \"prim\": \"TRANSFER_TOKENS\" },\n                                  { \"prim\": \"CONS\" }, { \"prim\": \"PAIR\" } ],\n                                [ { \"prim\": \"DROP\" }, { \"prim\": \"EXEC\" },\n                                  { \"prim\": \"NIL\",\n                                    \"args\": [ { \"prim\": \"operation\" } ] },\n                                  { \"prim\": \"PAIR\" } ] ] } ],\n                        [ { \"prim\": \"DIG\", \"args\": [ { \"int\": \"2\" } ] },\n                          { \"prim\": \"DROP\" },\n                          { \"prim\": \"IF_LEFT\",\n                            \"args\":\n                              [ [ { \"prim\": \"SWAP\" }, { \"prim\": \"DUP\" },\n                                  { \"prim\": \"DUG\",\n                                    \"args\": [ { \"int\": \"2\" } ] },\n                                  { \"prim\": \"SENDER\" }, { \"prim\": \"PAIR\" },\n                                  { \"prim\": \"DIG\",\n                                    \"args\": [ { \"int\": \"3\" } ] },\n                                  { \"prim\": \"SWAP\" }, { \"prim\": \"EXEC\" },\n                                  { \"prim\": \"SWAP\" }, { \"prim\": \"DUP\" },\n                                  { \"prim\": \"DUG\",\n                                    \"args\": [ { \"int\": \"2\" } ] },\n                                  { \"prim\": \"SWAP\" }, { \"prim\": \"DUP\" },\n                                  { \"prim\": \"DUG\",\n                                    \"args\": [ { \"int\": \"2\" } ] },\n                                  { \"prim\": \"CDR\" }, { \"prim\": \"COMPARE\" },\n                                  { \"prim\": \"LT\" },\n                                  { \"prim\": \"IF\",\n                                    \"args\":\n                                      [ [ { \"prim\": \"PUSH\",\n                                            \"args\":\n                                              [ { \"prim\": \"string\" },\n                                                { \"string\":\n                                                    \"NotEnoughBalance\" } ] },\n                                          { \"prim\": \"FAILWITH\" } ], [] ] },\n                                  { \"prim\": \"SWAP\" }, { \"prim\": \"DUP\" },\n                                  { \"prim\": \"DUG\",\n                                    \"args\": [ { \"int\": \"2\" } ] },\n                                  { \"prim\": \"SWAP\" }, { \"prim\": \"DUP\" },\n                                  { \"prim\": \"DUG\",\n                                    \"args\": [ { \"int\": \"2\" } ] },\n                                  { \"prim\": \"CDR\" }, { \"prim\": \"SUB\" },\n                                  { \"prim\": \"ABS\" }, { \"prim\": \"SWAP\" },\n                                  { \"prim\": \"CAR\" }, { \"prim\": \"PAIR\" },\n                                  { \"prim\": \"DUP\",\n                                    \"args\": [ { \"int\": \"3\" } ] },\n                                  { \"prim\": \"CDR\" },\n                                  { \"prim\": \"DIG\",\n                                    \"args\": [ { \"int\": \"3\" } ] },\n                                  { \"prim\": \"CAR\" },\n                                  { \"prim\": \"DIG\",\n                                    \"args\": [ { \"int\": \"2\" } ] },\n                                  { \"prim\": \"SOME\" }, { \"prim\": \"SENDER\" },\n                                  { \"prim\": \"UPDATE\" }, { \"prim\": \"PAIR\" },\n                                  { \"prim\": \"SENDER\" },\n                                  { \"prim\": \"CONTRACT\",\n                                    \"args\": [ { \"prim\": \"unit\" } ] },\n                                  { \"prim\": \"IF_NONE\",\n                                    \"args\":\n                                      [ [ { \"prim\": \"PUSH\",\n                                            \"args\":\n                                              [ { \"prim\": \"string\" },\n                                                { \"string\": \"InvalidContract\" } ] },\n                                          { \"prim\": \"FAILWITH\" } ], [] ] },\n                                  { \"prim\": \"SWAP\" },\n                                  { \"prim\": \"NIL\",\n                                    \"args\": [ { \"prim\": \"operation\" } ] },\n                                  { \"prim\": \"DIG\",\n                                    \"args\": [ { \"int\": \"2\" } ] },\n                                  { \"prim\": \"PUSH\",\n                                    \"args\":\n                                      [ { \"prim\": \"mutez\" }, { \"int\": \"1\" } ] },\n                                  { \"prim\": \"DIG\",\n                                    \"args\": [ { \"int\": \"4\" } ] },\n                                  { \"prim\": \"MUL\" }, { \"prim\": \"UNIT\" },\n                                  { \"prim\": \"TRANSFER_TOKENS\" },\n                                  { \"prim\": \"CONS\" }, { \"prim\": \"PAIR\" } ],\n                                [ { \"prim\": \"DUP\" },\n                                  { \"prim\": \"DUG\",\n                                    \"args\": [ { \"int\": \"2\" } ] },\n                                  { \"prim\": \"CDR\" }, { \"prim\": \"CDR\" },\n                                  { \"prim\": \"PAIR\" }, { \"prim\": \"SWAP\" },\n                                  { \"prim\": \"DUP\" },\n                                  { \"prim\": \"DUG\",\n                                    \"args\": [ { \"int\": \"2\" } ] },\n                                  { \"prim\": \"CDR\" }, { \"prim\": \"CAR\" },\n                                  { \"prim\": \"DIG\",\n                                    \"args\": [ { \"int\": \"2\" } ] },\n                                  { \"prim\": \"CAR\" },\n                                  { \"prim\": \"DIG\",\n                                    \"args\": [ { \"int\": \"2\" } ] },\n                                  { \"prim\": \"UNPAIR\" }, { \"prim\": \"SWAP\" },\n                                  { \"prim\": \"DUP\" },\n                                  { \"prim\": \"DUG\",\n                                    \"args\": [ { \"int\": \"2\" } ] },\n                                  { \"prim\": \"DUP\",\n                                    \"args\": [ { \"int\": \"4\" } ] },\n                                  { \"prim\": \"PAIR\" },\n                                  { \"prim\": \"DUP\",\n                                    \"args\": [ { \"int\": \"6\" } ] },\n                                  { \"prim\": \"SWAP\" }, { \"prim\": \"EXEC\" },\n                                  { \"prim\": \"DUP\",\n                                    \"args\": [ { \"int\": \"3\" } ] },\n                                  { \"prim\": \"DUP\",\n                                    \"args\": [ { \"int\": \"6\" } ] },\n                                  { \"prim\": \"PAIR\" },\n                                  { \"prim\": \"DIG\",\n                                    \"args\": [ { \"int\": \"6\" } ] },\n                                  { \"prim\": \"SWAP\" }, { \"prim\": \"EXEC\" },\n                                  { \"prim\": \"DUP\",\n                                    \"args\": [ { \"int\": \"5\" } ] },\n                                  { \"prim\": \"SENDER\" },\n                                  { \"prim\": \"COMPARE\" }, { \"prim\": \"EQ\" },\n                                  { \"prim\": \"IF\",\n                                    \"args\":\n                                      [ [ { \"prim\": \"SWAP\" } ],\n                                        [ { \"prim\": \"SWAP\" },\n                                          { \"prim\": \"DUP\" },\n                                          { \"prim\": \"DUG\",\n                                            \"args\": [ { \"int\": \"2\" } ] },\n                                          { \"prim\": \"CAR\" },\n                                          { \"prim\": \"SENDER\" },\n                                          { \"prim\": \"GET\" },\n                                          { \"prim\": \"IF_NONE\",\n                                            \"args\":\n                                              [ [ { \"prim\": \"PUSH\",\n                                                    \"args\":\n                                                      [ { \"prim\": \"nat\" },\n                                                        { \"int\": \"0\" } ] } ],\n                                                [] ] },\n                                          { \"prim\": \"DUP\",\n                                            \"args\": [ { \"int\": \"4\" } ] },\n                                          { \"prim\": \"SWAP\" },\n                                          { \"prim\": \"DUP\" },\n                                          { \"prim\": \"DUG\",\n                                            \"args\": [ { \"int\": \"2\" } ] },\n                                          { \"prim\": \"COMPARE\" },\n                                          { \"prim\": \"LT\" },\n                                          { \"prim\": \"IF\",\n                                            \"args\":\n                                              [ [ { \"prim\": \"PUSH\",\n                                                    \"args\":\n                                                      [ { \"prim\": \"string\" },\n                                                        { \"string\":\n                                                            \"NotPermitted\" } ] },\n                                                  { \"prim\": \"FAILWITH\" } ],\n                                                [] ] },\n                                          { \"prim\": \"DUP\",\n                                            \"args\": [ { \"int\": \"3\" } ] },\n                                          { \"prim\": \"CDR\" },\n                                          { \"prim\": \"DIG\",\n                                            \"args\": [ { \"int\": \"3\" } ] },\n                                          { \"prim\": \"CAR\" },\n                                          { \"prim\": \"DUP\",\n                                            \"args\": [ { \"int\": \"5\" } ] },\n                                          { \"prim\": \"DIG\",\n                                            \"args\": [ { \"int\": \"3\" } ] },\n                                          { \"prim\": \"SUB\" },\n                                          { \"prim\": \"ABS\" },\n                                          { \"prim\": \"SOME\" },\n                                          { \"prim\": \"SENDER\" },\n                                          { \"prim\": \"UPDATE\" },\n                                          { \"prim\": \"PAIR\" } ] ] },\n                                  { \"prim\": \"DUP\",\n                                    \"args\": [ { \"int\": \"3\" } ] },\n                                  { \"prim\": \"SWAP\" }, { \"prim\": \"DUP\" },\n                                  { \"prim\": \"DUG\",\n                                    \"args\": [ { \"int\": \"2\" } ] },\n                                  { \"prim\": \"CDR\" }, { \"prim\": \"COMPARE\" },\n                                  { \"prim\": \"LT\" },\n                                  { \"prim\": \"IF\",\n                                    \"args\":\n                                      [ [ { \"prim\": \"PUSH\",\n                                            \"args\":\n                                              [ { \"prim\": \"string\" },\n                                                { \"string\":\n                                                    \"InsufficientBalance\" } ] },\n                                          { \"prim\": \"FAILWITH\" } ], [] ] },\n                                  { \"prim\": \"DUP\",\n                                    \"args\": [ { \"int\": \"3\" } ] },\n                                  { \"prim\": \"SWAP\" }, { \"prim\": \"DUP\" },\n                                  { \"prim\": \"DUG\",\n                                    \"args\": [ { \"int\": \"2\" } ] },\n                                  { \"prim\": \"CDR\" }, { \"prim\": \"SUB\" },\n                                  { \"prim\": \"ABS\" }, { \"prim\": \"SWAP\" },\n                                  { \"prim\": \"CAR\" }, { \"prim\": \"PAIR\" },\n                                  { \"prim\": \"DUG\",\n                                    \"args\": [ { \"int\": \"2\" } ] },\n                                  { \"prim\": \"DUP\" },\n                                  { \"prim\": \"DUG\",\n                                    \"args\": [ { \"int\": \"3\" } ] },\n                                  { \"prim\": \"CDR\" }, { \"prim\": \"ADD\" },\n                                  { \"prim\": \"DIG\",\n                                    \"args\": [ { \"int\": \"2\" } ] },\n                                  { \"prim\": \"CAR\" }, { \"prim\": \"PAIR\" },\n                                  { \"prim\": \"DUP\",\n                                    \"args\": [ { \"int\": \"3\" } ] },\n                                  { \"prim\": \"CDR\" },\n                                  { \"prim\": \"DIG\",\n                                    \"args\": [ { \"int\": \"3\" } ] },\n                                  { \"prim\": \"CAR\" },\n                                  { \"prim\": \"DIG\",\n                                    \"args\": [ { \"int\": \"3\" } ] },\n                                  { \"prim\": \"DIG\",\n                                    \"args\": [ { \"int\": \"4\" } ] },\n                                  { \"prim\": \"SWAP\" }, { \"prim\": \"SOME\" },\n                                  { \"prim\": \"SWAP\" }, { \"prim\": \"UPDATE\" },\n                                  { \"prim\": \"DIG\",\n                                    \"args\": [ { \"int\": \"2\" } ] },\n                                  { \"prim\": \"DIG\",\n                                    \"args\": [ { \"int\": \"3\" } ] },\n                                  { \"prim\": \"SWAP\" }, { \"prim\": \"SOME\" },\n                                  { \"prim\": \"SWAP\" }, { \"prim\": \"UPDATE\" },\n                                  { \"prim\": \"PAIR\" },\n                                  { \"prim\": \"NIL\",\n                                    \"args\": [ { \"prim\": \"operation\" } ] },\n                                  { \"prim\": \"PAIR\" } ] ] } ] ] } ] ] } ] ] } ]";

const endpoint: Endpoint = {
  url: "https://testnet-tezos.giganode.io/",
  scope: 'testnet',
  protocolVersion: NetworkType.FLORENCENET
};

const contracts: Contract[] = [
  {
    name: "My PascaLIGO Contract.ligo",
    code: PASCALIGO_EXAMPLE,
    michelson: COUNTER_MICHELSON,
  },
  {
    name: "My CameLIGO Contract.mligo",
    code: CAMELIGO_EXAMPLE,
    michelson: COUNTER_MICHELSON,
  },
  {
    name: "My ReasonLIGO Contract.religo",
    code: REASONLIGO_EXAMPLE,
    michelson: COUNTER_MICHELSON,
  },
  {
    name: "My JsLIGO Contract.jsligo",
    code: JSLIGO_EXAMPLE,
    michelson: COUNTER_MICHELSON,
  },
  {
    name: "FA 1.2 (NOT tested for production)",
    code: FA12_SOURCE,
    michelson: FA12_MICHELSON,
  },
];

launchDeployer({ 
  endpoint,
  contracts
}, { openBrowser: false });